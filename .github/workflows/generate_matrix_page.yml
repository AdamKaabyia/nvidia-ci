name: Generate test matrices pages

on:
  pull_request:
    branches:
      - main
    types: [closed]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to check out'
        default: 'main'
        required: false
        type: string
      pr_number:
        description: 'PR number to process (leave empty to process all history)'
        required: false
        type: string
#TODO
#1.require to say 'all' not leave empty pr var = [latest|#num|all]
jobs:
  generate-matrix:
    if: github.event_name != 'pull_request' || github.repository == 'rh-ecosystem-edge/nvidia-ci' 
    runs-on: ubuntu-latest
    env:
      OUTPUT_DIR: 'workflows/test_matrix_dashboard/output'
      # Set to "latest" to process only the latest PR, or "all" to process all PR history
      PULL_MERGED_MODE: 'latest'
    steps:
      
      - name: Determine PR Number
        id: determine_pr
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ env.PULL_MERGED_MODE }}" == "all" ]; then
              echo "Processing all PR history for merged pull request."
              echo "PR_NUMBER=all" >> "$GITHUB_OUTPUT"
            else
              pr_num="${{ github.event.pull_request.number }}"
              echo "Merged PR: $pr_num"
              echo "PR_NUMBER=$pr_num" >> "$GITHUB_OUTPUT"
            fi
          else
            if [ -n "${{ github.event.inputs.pr_number }}" ]; then
              echo "Using manually specified PR: ${{ github.event.inputs.pr_number }}"
              echo "PR_NUMBER=${{ github.event.inputs.pr_number }}" >> "$GITHUB_OUTPUT"
            else
              echo "No specific PR provided; processing all history"
              echo "PR_NUMBER=all" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # For automatic triggers, use the PR's head ref; for manual, use the provided branch.
          ref: ${{ github.event.pull_request.head.ref || github.event.inputs.branch }}

      #TODO look into an action that does this - cleaner
      #TODO if there isnt a ocp_data look into showing the error + force that we have a file even if its empty, because what if the file exists but we couldnt retrieve it
      - name: Extract existing ocp_data.json from gh-pages
        id: extract_json
        shell: bash
        run: |
          echo "Extracting ocp_data.json from gh-pages branch..."
          git fetch origin gh-pages
          if git show origin/gh-pages:ocp_data.json > old_ocp_data.json 2>/dev/null; then
            echo "Existing ocp_data.json extracted."
          else
            echo "{}" > old_ocp_data.json
            echo "No ocp_data.json found in gh-pages; starting with empty JSON."
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Dependencies
        run: |
          pip install -r workflows/test_matrix_dashboard/requirements.txt

      - name: Run Extraction Script
        run: |
          echo "Processing PR: ${{ steps.determine_pr.outputs.PR_NUMBER }}"
          python workflows/test_matrix_dashboard/generate_test_matrix_data.py \
            --pr "${{ steps.determine_pr.outputs.PR_NUMBER }}" \
            --output_dir "${OUTPUT_DIR}" \
            --old_data_file old_ocp_data.json
#TODO store old and current ocp_data in gh-pages 
#TODO old_ocp_data + ocp_data have the name in env more flexable
      - name: Generate UI
        run: |
          echo "Generating UI using output from ${OUTPUT_DIR}"
          python workflows/test_matrix_dashboard/generate_test_matrix_ui.py --output_dir "${OUTPUT_DIR}"

      # - name: Commit JSON and HTML to gh-pages
      #   run: |
      #     echo "==== Committing JSON and HTML to gh-pages ===="
      #     git config user.name "${{ github.actor }}"
      #     git config user.email "${{ github.actor }}@users.noreply.github.com"
      #     # Move the generated output to a temporary directory
      #     mv "${OUTPUT_DIR}" /tmp/output
      #     # Fetch and check out the latest gh-pages branch
      #     git fetch origin gh-pages
      #     git checkout -B gh-pages origin/gh-pages
      #     # Copy only the JSON and HTML files from the temporary directory to the root of the branch
      #     cp /tmp/output/index.html .
      #     cp /tmp/output/ocp_data.json .
      #     # Stage and commit changes
      #     git add index.html ocp_data.json
      #     git commit -m "Update test matrix data and HTML from PR #${{ steps.determine_pr.outputs.PR_NUMBER }}" || echo "No changes to commit"
      #     git push origin gh-pages

      - name: Deploy HTML to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: ${{ env.OUTPUT_DIR }}
